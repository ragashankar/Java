Garbage Collection:

Garbage collection refers to the process of automatically freeing memory on the heap by
deleting objects that are no longer reachable in your program
You do need to know that System.gc() is not guaranteed to run, and you should be able to
recognize when objects become eligible for garbage collection.
Let’s start with the fi rst one. Java provides a method called System.gc(). Now you
might think from the name that this tells Java to run garbage collection. Nope! It meekly
suggests that now might be a good time for Java to kick off a garbage collection run. Java is
free to ignore the request.

public class Scope {
2: public static void main(String[] args) {
3: String one, two;
4: one = new String("a");
5: two = new String("b");
6: one = two;
7: String three = one;
8: one = null;
9: } }

On line 3, we write one and two. Just the words.
No need for boxes or arrows yet since no objects have gone on the heap yet. On line 4,
we have our fi rst object. Draw a box with the string "a" in it and draw an arrow from the
word one to that box. Line 5 is similar. Draw another box with the string "b" in it this time
and an arrow from the word two

On line 6, the variable one changes to point to "b". Either erase or cross out the arrow
from one and draw a new arrow from one to "b". On line 7, we have a new variable, so
write the word three and draw an arrow from three to "b". Notice that three points to
what one is pointing to right now and not what it was pointing to at the beginning. This
is why we are drawing pictures.

Finally, cross out the line between one and "b" since line 8 sets this variable to null.
Now, we were trying to fi nd out when the objects were fi rst eligible for garbage collection.
On line 6, we got rid of the only arrow pointing to "a", making that object eligible for
garbage collection. "b" has arrows pointing to it until it goes out of scope. This means "b"
doesn’t go out of scope until the end of the method on line 9.

finalize() :

finalize() is only run when the object is eligible for garbage collection.

public class Finalizer {
private static List objects = new ArrayList();
protected void finalize() {
objects.add(this); // Don't do this
} }
Remember, finalize() is only run when the object is eligible for garbage collection. The
problem here is that by the end of the method, the object is no longer eligible for garbage
collection because a static variable is referring to it and static variables stay in scope until
the program ends. Java is smart enough to realize this and aborts the attempt to throw out
the object. Now suppose later in the program objects is set to null. Oh, good, we can
fi nally remove the object from memory. Java remembers already running finalize() on
this object and will not do so again. The lesson is that the finalize() call could run zero
or one time. This is the exact same lesson as the simple example—that’s why it’s so easy to
remember.

